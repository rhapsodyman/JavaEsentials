Certain blocking library methods support interruption. Thread interruption is a cooperative mechanism for a thread to signal
another thread that it should, at its convenience and if it feels like it, stop what it
is doing and do something else.

Each thread has a boolean interrupted status; interrupting a thread sets its interrupted status to true. Thread contains methods for interrupting a thread and
querying the interrupted status of a thread. 
The interrupt method interrupts the target thread, 
and isInterrupted returns the interrupted status of the target thread. 
The poorly named static interrupted method clears the interrupted status of the current thread and returns its previous value;
this is the only way to clear the interrupted status.
Blocking library methods like Thread.sleep and Object.wait try to detect
when a thread has been interrupted and return early. They respond to interruption by clearing the interrupted status and throwing InterruptedException,
indicating that the blocking operation completed early due to interruption. The
JVM makes no guarantees on how quickly a blocking method will detect interruption, but in practice this happens reasonably quickly.


 Thread pools
A thread pool, as its name suggests, manages a homogeneous pool of worker
threads. A thread pool is tightly bound to a work queue holding tasks waiting to
be executed. Worker threads have a simple life: request the next task from the
work queue, execute it, and go back to waiting for another task.

The lifecycle implied by ExecutorService has three states—running, shutting
down, and terminated. ExecutorServices are initially created in the running state.
The shutdown method initiates a graceful shutdown: no new tasks are accepted
but previously submitted tasks are allowed to complete—including those that have not yet begun execution. 
The shutdownNow method initiates an abrupt shutdown: it attempts to cancel outstanding tasks and does not start any tasks that
are queued but not begun.

Once all tasks have completed, the ExecutorService transitions
to the terminated state. You can wait for an ExecutorService to reach the terminated state with awaitTermination, or poll for whether it has yet terminated with
isTerminated. It is common to follow shutdown immediately by awaitTermination

Example: https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html



The Timer facility manages the execution of deferred and periodic tasks. 
However, Timer has some drawbacks, and ScheduledThreadPoolExecutor should be thought of as its replacement. 
You can construct a ScheduledThreadPoolExecutor through its constructor or through the newScheduledThreadPool factory.
A Timer creates only a single thread for executing timer tasks. If a timer
task takes too long to run, the timing accuracy of other TimerTasks can suffer.
Another problem with Timer is that it behaves poorly if a TimerTask throws
an unchecked exception. The Timer thread doesn’t catch the exception, so an unchecked exception thrown from a TimerTask terminates the timer thread. Timer
also doesn’t resurrect the thread in this situation; instead, it erroneously assumes
the entire Timer was cancelled. In this case, TimerTasks that are already scheduled but not yet executed are never run, and new tasks cannot be scheduled.


Result-bearing tasks: Callable and Future
The Executor framework uses Runnable as its basic task representation. Runnable is a fairly limiting abstraction; run cannot return a value or throw checked
exceptions, although it can have side effects such as writing to a log file or placing
a result in a shared data structure.

The behavior of Future get varies depending on the task state (not yet started, running, completed). It returns immediately or throws an Exception if the task
has already completed, but if not it blocks until the task completes.


CompletionService: Executor meets BlockingQueue
If you have a batch of computations to submit to an Executor and you want
to retrieve their results as they become available, you could retain the Future
associated with each task and repeatedly poll for completion by calling get with
a timeout of zero. This is possible, but tedious. Fortunately there is a better way:
a completion service.
CompletionService combines the functionality of an Executor and a BlockingQueue.
You can submit Callable tasks to it for execution and use the queuelike methods take and poll to retrieve completed results, packaged as Futures,
as they become available.